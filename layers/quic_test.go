// Copyright 2012 Google, Inc. All rights reserved.
// Copyright 2009-2011 Andreas Krennmair. All rights reserved.
// Copyright 2017 Brian Trammell. All Rights Reserved.
//
// Use of this source code is governed by a BSD-style license
// that can be found in the LICENSE file in the root of the source
// tree.

package layers

import (
	"testing"

	"github.com/google/gopacket"
)

// define some synthetic packets we faked with scapy

var version_negotiation = []byte{0x7e, 0x57, 0x7e, 0x11, 0x11, 0x11, 0x7e, 0x57,
	0x7e, 0x0, 0x0, 0x0, 0x8, 0x0, 0x45, 0x0, 0x0, 0x35, 0x0, 0x1, 0x0, 0x0, 0x40,
	0x11, 0x4b, 0x82, 0xa, 0xb, 0xc, 0xd, 0xa, 0xe, 0xf, 0x10, 0xdd, 0xc8, 0x1,
	0xbb, 0x0, 0x21, 0xce, 0xf7, 0x81, 0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee, 0x60,
	0xd, 0xfd, 0xec, 0xba, 0x98, 0xff, 0x0, 0x0, 0x4, 0xff, 0x0, 0x0, 0x4, 0x1a,
	0x2a, 0x1a, 0x2a}

func TestQUICVersionNego(t *testing.T) {
	p := gopacket.NewPacket(version_negotiation, LinkTypeEthernet, gopacket.Default)
	if p.ErrorLayer() != nil {
		t.Error("Failed to decode packet:", p.ErrorLayer().Error())
	}
	checkLayers(p, []gopacket.LayerType{LayerTypeEthernet, LayerTypeIPv4, LayerTypeUDP, LayerTypeQUIC}, t)
	if got, ok := p.ApplicationLayer().(*QUIC); ok {
		if got.PktType != QUICPktTypeVersionNego {
			t.Error("Unexpected packet type")
		}
		if got.ConnID != 0xc0ffeec0ffee600d {
			t.Error("Unexpected connection ID")
		}
		if got.Version != 0xff000004 {
			t.Error("Unexpected version")
		}
	} else {
		t.Error("Application layer packet not QUIC")
	}
}

var stateless_reset = []byte{0x7e, 0x57, 0x7e, 0x0, 0x0, 0x0, 0x7e, 0x57, 0x7e,
	0x11, 0x11, 0x11, 0x8, 0x0, 0x45, 0x0, 0x0, 0x2d, 0x0, 0x1, 0x0, 0x0, 0x40,
	0x11, 0x4b, 0x8a, 0xa, 0xe, 0xf, 0x10, 0xa, 0xb, 0xc, 0xd, 0x1, 0xbb, 0xdd,
	0xc8, 0x0, 0x19, 0x4f, 0x9c, 0x88, 0xba, 0xdb, 0xad, 0xba, 0xdb, 0xad, 0xba,
	0xd1, 0xba, 0xdb, 0xad, 0x22, 0xff, 0x0, 0x0, 0x4}

var short1 = []byte{0x7e, 0x57, 0x7e, 0x11, 0x11, 0x11, 0x7e, 0x57, 0x7e, 0x0,
	0x0, 0x0, 0x8, 0x0, 0x45, 0x0, 0x0, 0x35, 0x0, 0x1, 0x0, 0x0, 0x40, 0x11, 0x4b,
	0x82, 0xa, 0xb, 0xc, 0xd, 0xa, 0xe, 0xf, 0x10, 0xdd, 0xc8, 0x1, 0xbb, 0x0, 0x21,
	0xed, 0xf3, 0x1, 0x42, 0x64, 0x6f, 0x6e, 0x74, 0x6c, 0x6f, 0x6f, 0x6b, 0x61,
	0x74, 0x6d, 0x65, 0x69, 0x6d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64}

var short2 = []byte{0x7e, 0x57, 0x7e, 0x11, 0x11, 0x11, 0x7e, 0x57, 0x7e, 0x0,
	0x0, 0x0, 0x8, 0x0, 0x45, 0x0, 0x0, 0x36, 0x0, 0x1, 0x0, 0x0, 0x40, 0x11, 0x4b,
	0x81, 0xa, 0xb, 0xc, 0xd, 0xa, 0xe, 0xf, 0x10, 0xdd, 0xc8, 0x1, 0xbb, 0x0, 0x22,
	0xcf, 0xac, 0x22, 0x42, 0x42, 0x64, 0x6f, 0x6e, 0x74, 0x6c, 0x6f, 0x6f, 0x6b,
	0x61, 0x74, 0x6d, 0x65, 0x69, 0x6d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64}

var short4 = []byte{0x7e, 0x57, 0x7e, 0x11, 0x11, 0x11, 0x7e, 0x57, 0x7e, 0x0,
	0x0, 0x0, 0x8, 0x0, 0x45, 0x0, 0x0, 0x38, 0x0, 0x1, 0x0, 0x0, 0x40, 0x11, 0x4b,
	0x7f, 0xa, 0xb, 0xc, 0xd, 0xa, 0xe, 0xf, 0x10, 0xdd, 0xc8, 0x1, 0xbb, 0x0, 0x24,
	0x8c, 0x66, 0x23, 0x42, 0x42, 0x42, 0x42, 0x64, 0x6f, 0x6e, 0x74, 0x6c, 0x6f,
	0x6f, 0x6b, 0x61, 0x74, 0x6d, 0x65, 0x69, 0x6d, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64}

var shortcid = []byte{0x7e, 0x57, 0x7e, 0x11, 0x11, 0x11, 0x7e, 0x57, 0x7e, 0x0, 0x0, 0x0, 0x8, 0x0, 0x45, 0x0, 0x0, 0x40, 0x0, 0x1, 0x0, 0x0, 0x40, 0x11, 0x4b, 0x77, 0xa, 0xb, 0xc, 0xd, 0xa, 0xe, 0xf, 0x10, 0xdd, 0xc8, 0x1, 0xbb, 0x0, 0x2c, 0x8f, 0x46, 0x63, 0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee, 0x60, 0xd, 0x42, 0x42, 0x42, 0x42, 0x64, 0x6f, 0x6e, 0x74, 0x6c, 0x6f, 0x6f, 0x6b, 0x61, 0x74, 0x6d, 0x65, 0x69, 0x6d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64}
